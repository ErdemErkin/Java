/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package app;
import java.sql.*;
import javax.swing.JOptionPane;
import java.util.*;
import java.util.logging.*;
import javax.swing.*;
import javax.swing.table.*;
import java.awt.*;

/**
 *
 * @author Mike
 */
public class EditOrder extends javax.swing.JFrame {

    /**
     * Creates new form EditOrder
     */
    private String orderID;
    private String client_name;
    private String product;
    private String phone;
    private String deliveryMethod;
    private String address;
    private String quantity;
    private String price;
    
    public EditOrder() {
        initComponents();
        loadOrdersToList();
        
        jList1.addListSelectionListener(e -> {
    if (!e.getValueIsAdjusting()) {
        int selectedIndex = jList1.getSelectedIndex();
        if (selectedIndex != -1) {
            String selectedOrder = jList1.getSelectedValue();
            String[] parts = selectedOrder.split(" - ");
            if (parts.length >= 4) {
                client_name = parts[0];
                product = parts[1];
                quantity = parts[2];
                price = parts[3];
                
                
                Connect dbConnect = new Connect();
                try {
                    String query = "SELECT phone, address FROM orders WHERE client_name = ?";
                    PreparedStatement pstmt = dbConnect.conn.prepareStatement(query);
                    pstmt.setString(1, client_name);
                    ResultSet rs = pstmt.executeQuery();
                    if (rs.next()) {
                        phone = rs.getString("phone");
                        address = rs.getString("address");
                    }
                    rs.close();
                    pstmt.close();
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, "Грешка при зареждане на данни: " + ex.getMessage(), "Грешка", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }
});
    }
    
    private void loadOrdersToList() {
    DefaultListModel<String> model = new DefaultListModel<>();
    Connect dbConnect = new Connect();
    try {
        String query = "SELECT client_name, product, phone, delivery_method, address, quantity, price FROM orders";
        Statement stmt = dbConnect.conn.createStatement();
        ResultSet rs = stmt.executeQuery(query);

        while (rs.next()) {
            
            String client_name = rs.getString("client_name");
            String product = rs.getString("product");
            String phone = rs.getString("phone");
            String deliveryMethod = rs.getString("delivery_method");
            String address = rs.getString("address");
            String quantity = rs.getString("quantity");
            String price = rs.getString("price");
            
            
            String orderDetails = client_name + " - " + product + " - " + quantity + " - " + price 
                                + " - " + phone + " - " + deliveryMethod + " - " + address;
            model.addElement(orderDetails);  
        }

        jList1.setModel(model);  

        rs.close();
        stmt.close();
        dbConnect.conn.close();

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Грешка при зареждане на поръчките: " + e.getMessage(), "Грешка", JOptionPane.ERROR_MESSAGE);
    }
}

    
    private void jList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {
        if (!evt.getValueIsAdjusting()) {
            int selectedIndex = jList1.getSelectedIndex();
            if (selectedIndex != -1) {
                
                String selectedOrder = jList1.getSelectedValue();
                String[] parts = selectedOrder.split(" - ");
                if (parts.length >= 4) {
                    client_name = parts[0];
                    product = parts[1];
                    quantity = parts[2];
                    price = parts[3];
                    
                }
            }
        }
    }
    
    
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane1.setViewportView(jList1);

        jLabel1.setFont(new java.awt.Font("Segoe UI Black", 1, 36)); // NOI18N
        jLabel1.setText("Редактиране");

        jButton1.setText("Редактирай");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(255, 102, 102));
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("Назад");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(75, 75, 75)
                                .addComponent(jLabel1))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 353, Short.MAX_VALUE)
                                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(0, 16, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton2)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(8, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addGap(22, 22, 22)
                .addComponent(jButton2)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        if (client_name != null && !client_name.isEmpty() && product != null && !product.isEmpty()) {
        // Създаване на полета за редактиране на поръчката
        JTextField nameField = new JTextField(client_name);
        JTextField phoneField = new JTextField(phone); // За да избегнем NullPointerException
        JTextField quantityField = new JTextField(quantity != null ? quantity : ""); 
        JTextField priceField = new JTextField(price != null ? price : ""); 
        JTextField addressField = new JTextField(address); 
        
        
        Connect dbConnect = new Connect();
        JComboBox<String> productComboBox = new JComboBox<>();
        try {
            String query = "SELECT product_name FROM products";
            Statement stmt = dbConnect.conn.createStatement();
            ResultSet rs = stmt.executeQuery(query);
            while (rs.next()) {
                productComboBox.addItem(rs.getString("product_name"));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        
        JRadioButton deliveryToOffice = new JRadioButton("До офис на куриер");
        JRadioButton deliveryToAddress = new JRadioButton("До адрес на клиента");
        ButtonGroup deliveryGroup = new ButtonGroup();
        deliveryGroup.add(deliveryToOffice);
        deliveryGroup.add(deliveryToAddress);

        
        if (deliveryMethod != null && deliveryMethod.equals("До офис на куриер")) {
            deliveryToOffice.setSelected(true);
        } else {
            deliveryToAddress.setSelected(true);
        }

        
        JPanel panel = new JPanel(new GridLayout(0, 1));
        panel.add(new JLabel("Име и Фамилия:"));
        panel.add(nameField);
        panel.add(new JLabel("Телефон:"));
        panel.add(phoneField);
        panel.add(new JLabel("Продукт:"));
        panel.add(productComboBox);
        panel.add(new JLabel("Брой продукти:"));
        panel.add(quantityField);
        panel.add(new JLabel("Цена:"));
        panel.add(priceField);
        panel.add(new JLabel("Метод на доставка:"));
        panel.add(deliveryToOffice);
        panel.add(deliveryToAddress);
        panel.add(new JLabel("Адрес:"));
        panel.add(addressField);

        
        Object[] options = {"Запази", "Отказ"};
        int result = JOptionPane.showOptionDialog(
            null, panel, "Редактиране на поръчка", 
            JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE, 
            null, options, options[0]);

        
        if (result == JOptionPane.OK_OPTION) {
            String clientName = nameField.getText().trim();
            String phone = phoneField.getText().trim();
            String selectedProduct = (String) productComboBox.getSelectedItem();
            String quantity = quantityField.getText().trim();
            String price = priceField.getText().trim();
            String deliveryMethod = deliveryToOffice.isSelected() ? "До офис на куриер" : "До адрес на клиента";
            String address = addressField.getText().trim();

            
            if (clientName.isEmpty() || phone.isEmpty() || price.isEmpty() || quantity.isEmpty() ||
                (!deliveryToOffice.isSelected() && !deliveryToAddress.isSelected()) || address.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Моля, попълнете всички задължителни полета!", "Грешка", JOptionPane.ERROR_MESSAGE);
                return;
            }

            
            updateOrderInDatabase(clientName, selectedProduct, phone, deliveryMethod, address, quantity, price);
        }
    } else {
        JOptionPane.showMessageDialog(this, "Моля, изберете поръчка за редактиране.", "Грешка", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        Home searchWindow = new Home();
        searchWindow.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void updateOrderInDatabase(String customerName, String productName, String phone, String deliveryMethod, String address, String quantity, String price) {
        Connect dbConnect = new Connect();
        try {
            String updateQuery = "UPDATE orders SET client_name = ?, product = ?, phone = ?, delivery_method = ?, address = ?, quantity = ?, price = ? WHERE client_name = ?";
            PreparedStatement pstmt = dbConnect.conn.prepareStatement(updateQuery);
            pstmt.setString(1, customerName);
            pstmt.setString(2, productName);
            pstmt.setString(3, phone);
            pstmt.setString(4, deliveryMethod);
            pstmt.setString(5, address);
            pstmt.setString(6, quantity);
            pstmt.setString(7, price);
            pstmt.setString(8, this.client_name); 

            int rowsAffected = pstmt.executeUpdate();

            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(this, "Поръчката беше успешно редактирана.", "Успех", JOptionPane.INFORMATION_MESSAGE);
                loadOrdersToList();  
            } else {
                JOptionPane.showMessageDialog(this, "Грешка при редактирането на поръчката.", "Грешка", JOptionPane.ERROR_MESSAGE);
            }

            pstmt.close();
            dbConnect.conn.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Грешка при редактиране на поръчката: " + e.getMessage(), "Грешка", JOptionPane.ERROR_MESSAGE);
        }
    }
    /**
     * @param args the command line arguments
     */
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EditOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EditOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EditOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EditOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EditOrder().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JList<String> jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
